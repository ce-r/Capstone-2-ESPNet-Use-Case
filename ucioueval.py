# -*- coding: utf-8 -*-
"""ucIOUEval.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ONpk9blZTkWZu7ezNsxldNdhS_lSGyl4

nibabel==2.3.0
opencv>=3.0.0
pytorch==0.3.1
skimage>=0.13.1
pickle==
graphviz==0.9
"""

import numpy as np

class iouEval:
    def __init__(self, nClasses):
        self.nClasses = nClasses
        self.reset()

    def reset(self):
        self.overall_acc = 0
        self.per_class_acc = np.zeros(self.nClasses, dtype=np.float32) # list of 4 elmts for set of 4 classes
        self.per_class_iu = np.zeros(self.nClasses, dtype=np.float32)
        self.mIOU = 0
        self.batchCount = 1
        # all initialized to zero

    def fast_hist(self, a, b): # 
        # WHAT IS THIS CALCULATION ??
        k = (a >= 0) & (a < self.nClasses) # hist for classes using (gth, predict)
        return np.bincount(self.nClasses * a[k].astype(int) + 
                           b[k], minlength=self.nClasses ** 2).reshape(self.nClasses, self.nClasses)

    def compute_hist(self, predict, gth):
        hist = self.fast_hist(gth, predict)
        return hist

    def addBatch(self, predict, gth):
        predict = predict.cpu().numpy().flatten() # does the cpu work in the gpu environment??
        gth = gth.cpu().numpy().flatten()

        epsilon = 0.00000001
        hist = self.compute_hist(predict, gth) # is it possible we're not missing per_class elmts bc
                                               # of missing data or an overlooked error in code
        overall_acc = np.diag(hist).sum() / (hist.sum() + epsilon)


        per_class_acc = np.diag(hist) / (hist.sum(1) + epsilon)
        print('per_class_acc: ', per_class_acc)
        per_class_iu = np.diag(hist) / (hist.sum(1) + hist.sum(0) - np.diag(hist) + epsilon)
        print('per_class_iu: ', per_class_iu)


        mIou = np.nanmean(per_class_iu)

        self.overall_acc +=overall_acc
        self.per_class_acc += per_class_acc
        self.per_class_iu += per_class_iu
        self.mIOU += mIou
        self.batchCount += 1

    def getMetric(self):
        overall_acc = self.overall_acc/self.batchCount

        per_class_acc = self.per_class_acc / self.batchCount # fasthist() and addBatch() are not 
                                                             # giving us return values in printout 

        per_class_iu = self.per_class_iu / self.batchCount
        
        mIOU = self.mIOU / self.batchCount

        ##print(overall_acc, per_class_acc, per_class_iu, mIOU)
        ## this print was printing before
        ## create new .txt file for ucIOUEval
        print('per_class_acc:', per_class_acc, ' per_class_iu:', per_class_iu, ' mIOU:', mIOU) # 1st & 3rd class
                                                                                               # return 0 values
                                                                                               # in each per_class list

        return overall_acc, per_class_acc, per_class_iu, mIOU

